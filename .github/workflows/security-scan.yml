# .github/workflows/security-scan.yml

name: Security Scan

# This workflow runs on every push to any branch
on: [push]

jobs:
  # .github/workflows/security-scan.yml

  bandit-scan:
    name: Bandit Scan
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code from your repository
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Python with optimized caching for speed
      - name: Set up Python with dependency caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      # Step 3: Install dependencies using the cache
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Run Bandit to generate the JSON report
      - name: Run Bandit and Generate Report
        run: bandit -r . -f json -o bandit-report.json --exit-zero

      # Step 5: Summarize the report with Gemini and prepare the output
      - name: Summarize Report with Gemini
        id: summarize
        run: |
          REPORT_AS_STRING=$(cat bandit-report.json)

          # This new prompt is specifically designed for clean formatting in Slack.
          PROMPT="You are a cybersecurity expert. Your task is to analyze this Bandit JSON report and create a security summary formatted for Slack.

          The output MUST follow this plain text format exactly. Use single asterisks for bolding as shown. Do not use markdown heading characters like '#'.

          HIGH SEVERITY
          Error Name: *[The 'test_name' from the report]*
          Error Message: [The 'issue_text' from the report]

          ---

          MEDIUM SEVERITY
          Error Name: *[The 'test_name' from the report]*
          Error Message: [The 'issue_text' from the report]

          ---

          LOW SEVERITY
          Error Name: *[The 'test_name' from the report]*
          Error Message: [The 'issue_text' from the report]

          If a severity level has no issues, state 'No issues found.' under that heading.
          Do not add any other text or explanation outside of this format.

          Here is the Bandit JSON report:
          "

          # Use jq to safely build the final JSON payload with the new prompt.
          PAYLOAD=$(jq -n --arg report "$REPORT_AS_STRING" --arg prompt "$PROMPT" '{
              "contents": [{
                  "parts": [{
                      "text": ($prompt + "\n\n" + $report)
                  }]
              }]
          }')
          
          # Call the Gemini API (v1beta) with the correctly formatted payload.
          curl -s -X POST -H "Content-Type: application/json" "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" -d "$PAYLOAD" > gemini_response.json

          # Extract the summary text and set it as a step output
          SUMMARY=$(jq -r '.candidates[0].content.parts[0].text // "Error: Could not get summary from Gemini."' gemini_response.json)
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$SUMMARY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # Step 6: Send the generated summary to your Slack channel
      - name: Send Report to Slack
        if: success() # Only run this step if the previous steps succeeded
        run: |
          # Use the output from the "summarize" step to build the Slack message
          MESSAGE_TEXT="*Bandit Security Report Summary*:\n\n${{ steps.summarize.outputs.summary }}"
          SLACK_PAYLOAD=$(jq -n --arg text "$MESSAGE_TEXT" '{ "text": $text }')
          
          # Send the final message to your Slack webhook
          curl -X POST -H "Content-Type: application/json" --data "$SLACK_PAYLOAD" ${{ secrets.SLACK_WEBHOOK_URL }}
